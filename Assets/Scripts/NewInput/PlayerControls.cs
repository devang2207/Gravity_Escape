//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/NewInput/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""RocketMove"",
            ""id"": ""35bdcee4-e9d6-49ae-9525-db5828b7880b"",
            ""actions"": [
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""cc892083-5699-4e31-ab4b-e3bf0659e3c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMove"",
                    ""type"": ""Button"",
                    ""id"": ""d49a694a-c765-443b-8f38-631ed7c46a7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMove"",
                    ""type"": ""Button"",
                    ""id"": ""3c92f63d-561c-42b1-afb6-79e199e2c6da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CheatButton"",
                    ""type"": ""Button"",
                    ""id"": ""690c9a4d-acd9-4fd6-8466-fb49f0dbf8cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6d53c116-823e-4780-a60c-e4e28239e87e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3efee4f-5176-473d-9059-87bd422515bb"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ff81428-5e71-4fb6-b772-a71c60f8920c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a6c9622-7f1e-45d8-ae51-cc430e62726f"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de018842-14cb-4a8a-a5e3-dc318fcc2e33"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e4a238e-5083-43fc-86a8-cff75f6e7eb2"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4290b3fc-d953-4bee-8626-5727fe760fe7"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheatButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16bbfd3b-9c91-4f98-9cdf-568c5ab9f288"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheatButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RocketMove
        m_RocketMove = asset.FindActionMap("RocketMove", throwIfNotFound: true);
        m_RocketMove_Thrust = m_RocketMove.FindAction("Thrust", throwIfNotFound: true);
        m_RocketMove_LeftMove = m_RocketMove.FindAction("LeftMove", throwIfNotFound: true);
        m_RocketMove_RightMove = m_RocketMove.FindAction("RightMove", throwIfNotFound: true);
        m_RocketMove_CheatButton = m_RocketMove.FindAction("CheatButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RocketMove
    private readonly InputActionMap m_RocketMove;
    private List<IRocketMoveActions> m_RocketMoveActionsCallbackInterfaces = new List<IRocketMoveActions>();
    private readonly InputAction m_RocketMove_Thrust;
    private readonly InputAction m_RocketMove_LeftMove;
    private readonly InputAction m_RocketMove_RightMove;
    private readonly InputAction m_RocketMove_CheatButton;
    public struct RocketMoveActions
    {
        private @PlayerControls m_Wrapper;
        public RocketMoveActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Thrust => m_Wrapper.m_RocketMove_Thrust;
        public InputAction @LeftMove => m_Wrapper.m_RocketMove_LeftMove;
        public InputAction @RightMove => m_Wrapper.m_RocketMove_RightMove;
        public InputAction @CheatButton => m_Wrapper.m_RocketMove_CheatButton;
        public InputActionMap Get() { return m_Wrapper.m_RocketMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RocketMoveActions set) { return set.Get(); }
        public void AddCallbacks(IRocketMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_RocketMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RocketMoveActionsCallbackInterfaces.Add(instance);
            @Thrust.started += instance.OnThrust;
            @Thrust.performed += instance.OnThrust;
            @Thrust.canceled += instance.OnThrust;
            @LeftMove.started += instance.OnLeftMove;
            @LeftMove.performed += instance.OnLeftMove;
            @LeftMove.canceled += instance.OnLeftMove;
            @RightMove.started += instance.OnRightMove;
            @RightMove.performed += instance.OnRightMove;
            @RightMove.canceled += instance.OnRightMove;
            @CheatButton.started += instance.OnCheatButton;
            @CheatButton.performed += instance.OnCheatButton;
            @CheatButton.canceled += instance.OnCheatButton;
        }

        private void UnregisterCallbacks(IRocketMoveActions instance)
        {
            @Thrust.started -= instance.OnThrust;
            @Thrust.performed -= instance.OnThrust;
            @Thrust.canceled -= instance.OnThrust;
            @LeftMove.started -= instance.OnLeftMove;
            @LeftMove.performed -= instance.OnLeftMove;
            @LeftMove.canceled -= instance.OnLeftMove;
            @RightMove.started -= instance.OnRightMove;
            @RightMove.performed -= instance.OnRightMove;
            @RightMove.canceled -= instance.OnRightMove;
            @CheatButton.started -= instance.OnCheatButton;
            @CheatButton.performed -= instance.OnCheatButton;
            @CheatButton.canceled -= instance.OnCheatButton;
        }

        public void RemoveCallbacks(IRocketMoveActions instance)
        {
            if (m_Wrapper.m_RocketMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRocketMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_RocketMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RocketMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RocketMoveActions @RocketMove => new RocketMoveActions(this);
    public interface IRocketMoveActions
    {
        void OnThrust(InputAction.CallbackContext context);
        void OnLeftMove(InputAction.CallbackContext context);
        void OnRightMove(InputAction.CallbackContext context);
        void OnCheatButton(InputAction.CallbackContext context);
    }
}
